// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Gigya
import CommonCrypto
import Foundation
import NotificationCenter
import Swift
import UIKit
import UserNotifications
import WebKit
@_hasMissingDesignatedInitializers public class GeneralUtils {
  public func iosVersion() -> Swift.String
  public func showNotification(title: Swift.String, body: Swift.String, id: Swift.String, userInfo: [Swift.AnyHashable : Any] = [:])
  public func getTopViewController() -> UIKit.UIViewController?
  public func show(vc: UIKit.UIViewController, title: Swift.String, message: Swift.String, result: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
public protocol ResolverProtocol {
  func resolve<Service>(_ serviceType: Service.Type) -> Service?
}
public struct ApiRequestModel {
  public let method: Swift.String
  public let params: [Swift.String : Any]?
  public let isAnonymous: Swift.Bool
  public init(method: Swift.String, params: [Swift.String : Any]? = nil, isAnonymous: Swift.Bool = false)
}
public typealias ResolverHandling<T> = (Gigya.ResolverProtocol) -> T
@_hasMissingDesignatedInitializers public class IOCContainer {
  public func register<Service>(service: Service.Type, isSingleton: Swift.Bool = false, factory: @escaping Gigya.ResolverHandling<Service>)
  @objc deinit
}
extension IOCContainer : Gigya.ResolverProtocol {
  public func resolve<Service>(_ serviceType: Service.Type) -> Service?
}
@frozen public enum GigyaApiResult<ResponseType> {
  case success(data: ResponseType)
  case failure(_: Gigya.NetworkError)
}
@frozen public enum GigyaLoginResult<ResponseType> where ResponseType : Gigya.GigyaAccountProtocol {
  case success(data: ResponseType)
  case failure(Gigya.LoginApiError<ResponseType>)
}
public struct LoginApiError<T> where T : Gigya.GigyaAccountProtocol {
  public let error: Gigya.NetworkError
  public let interruption: Gigya.GigyaInterruptions<T>?
  public init(error: Gigya.NetworkError, interruption: Gigya.GigyaInterruptions<T>? = nil)
}
@frozen public enum GigyaInterruptions<T> where T : Gigya.GigyaAccountProtocol {
  case pendingRegistration(resolver: Gigya.PendingRegistrationResolver<T>)
  case pendingVerification(regToken: Swift.String)
  case pendingPasswordChange(regToken: Swift.String)
  case conflitingAccount(resolver: Gigya.LinkAccountsResolver<T>)
  case pendingTwoFactorRegistration(response: Gigya.GigyaResponseModel, inactiveProviders: [Gigya.TFAProviderModel]?, factory: Gigya.TFAResolverFactory<T>)
  case pendingTwoFactorVerification(response: Gigya.GigyaResponseModel, activeProviders: [Gigya.TFAProviderModel]?, factory: Gigya.TFAResolverFactory<T>)
}
@frozen public enum GigyaBiometricResult {
  case success
  case failure
  public static func == (a: Gigya.GigyaBiometricResult, b: Gigya.GigyaBiometricResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers open class TFAResolver<T> : Gigya.Resolver<T> where T : Gigya.GigyaAccountProtocol {
  public var gigyaAssertion: Swift.String?
  @objc deinit
  required public init(businessApiDelegate: Gigya.BusinessApiDelegate, interruption: Gigya.GigyaResponseModel, completionHandler: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class GigyaWebBridge<T> : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler where T : Gigya.GigyaAccountProtocol {
  public func attachTo(webView: WebKit.WKWebView, viewController: UIKit.UIViewController, pluginEvent: @escaping (Gigya.GigyaPluginEvent<T>) -> Swift.Void)
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
public protocol GigyaAccountProtocol : Swift.Decodable, Swift.Encodable {
  var UID: Swift.String? { get set }
  var profile: Gigya.GigyaProfile? { get set }
  var UIDSignature: Swift.String? { get set }
  var apiVersion: Swift.Int? { get set }
  var created: Swift.String? { get set }
  var createdTimestamp: Swift.Double? { get set }
  var isActive: Swift.Bool? { get set }
  var isRegistered: Swift.Bool? { get set }
  var isVerified: Swift.Bool? { get set }
  var lastLogin: Swift.String? { get set }
  var lastLoginTimestamp: Swift.Double? { get set }
  var lastUpdated: Swift.String? { get set }
  var lastUpdatedTimestamp: Swift.Double? { get set }
  var loginProvider: Swift.String? { get set }
  var oldestDataUpdated: Swift.String? { get set }
  var oldestDataUpdatedTimestamp: Swift.Double? { get set }
  var registered: Swift.String? { get set }
  var registeredTimestamp: Swift.Double? { get set }
  var signatureTimestamp: Swift.String? { get set }
  var socialProviders: Swift.String? { get set }
  var verified: Swift.String? { get set }
  var verifiedTimestamp: Swift.Double? { get set }
}
public struct GigyaDataDefault : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct GigyaAccount : Gigya.GigyaAccountProtocol {
  public var UID: Swift.String?
  public var profile: Gigya.GigyaProfile?
  public var UIDSignature: Swift.String?
  public var apiVersion: Swift.Int?
  public var created: Swift.String?
  public var createdTimestamp: Swift.Double?
  public var isActive: Swift.Bool?
  public var isRegistered: Swift.Bool?
  public var isVerified: Swift.Bool?
  public var lastLogin: Swift.String?
  public var lastLoginTimestamp: Swift.Double?
  public var lastUpdated: Swift.String?
  public var lastUpdatedTimestamp: Swift.Double?
  public var loginProvider: Swift.String?
  public var oldestDataUpdated: Swift.String?
  public var oldestDataUpdatedTimestamp: Swift.Double?
  public var registered: Swift.String?
  public var registeredTimestamp: Swift.Double?
  public var signatureTimestamp: Swift.String?
  public var socialProviders: Swift.String?
  public var verified: Swift.String?
  public var verifiedTimestamp: Swift.Double?
  public let data: Gigya.GigyaDataDefault?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol GigyaInstanceProtocol {
}
@frozen public enum PushNotificationModes : Swift.String {
  case optin
  case verify
  case cancel
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class LinkAccountsResolver<T> where T : Gigya.GigyaAccountProtocol {
  final public var conflictingAccount: Gigya.ConflictingAccount?
  final public func linkToSite(loginId: Swift.String, password: Swift.String)
  final public func linkToSocial(provider: Gigya.GigyaSocialProviders, viewController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InterceptorsUtils {
  @objc deinit
}
@frozen public enum GigyaResult<Response> {
  case success(data: Response)
  case failure(Gigya.NetworkError)
}
@objc(GSSession) public class GigyaSession : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public static var supportsSecureCoding: Swift.Bool
  public init?(sessionToken token: Swift.String, secret: Swift.String, expiration: Swift.Double? = nil)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
public enum ApiStatusCode : Swift.Int {
  case success
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension ApiStatusCode : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
}
public enum Interruption : Swift.Int, Swift.CaseIterable {
  case pendingRegistration
  case pendingVerification
  case conflitingAccounts
  case pendingTwoFactorRegistration
  case pendingTwoFactorVerification
  case accountLinked
  case pendingPasswordChange
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [Gigya.Interruption]
  public static var allCases: [Gigya.Interruption] {
    get
  }
}
public protocol BiometricServiceProtocol {
  var isLocked: Swift.Bool { get }
  var isOptIn: Swift.Bool { get }
  func optIn(completion: @escaping (Gigya.GigyaBiometricResult) -> Swift.Void)
  func optOut(completion: @escaping (Gigya.GigyaBiometricResult) -> Swift.Void)
  func unlockSession(completion: @escaping (Gigya.GigyaBiometricResult) -> Swift.Void)
  func lockSession(completion: @escaping (Gigya.GigyaBiometricResult) -> Swift.Void)
}
public struct GigyaResponseModel : Swift.Codable {
  public var statusCode: Gigya.ApiStatusCode
  public var errorCode: Swift.Int
  public var callId: Swift.String
  public let errorMessage: Swift.String?
  public func toDictionary() -> [Swift.String : Any]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias RemoteMsgClosure = ([Swift.AnyHashable : Any]) -> ()
public protocol PushNotificationsServiceExternalProtocol {
  func getPushToken() -> Swift.String?
  func registerTo(key: Swift.String, closure: @escaping Gigya.RemoteMsgClosure)
  func registerForPushNotifications(compilation: @escaping (Swift.Bool) -> ())
  func getNotificationSettings(_ compilation: @escaping (Swift.Bool) -> ())
}
public struct TFAProviderModel : Swift.Codable {
  public let name: Gigya.TFAProvider
  public let authLevel: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFAProvidersModel : Swift.Codable {
  public let activeProviders: [Gigya.TFAProviderModel]?
  public let inactiveProviders: [Gigya.TFAProviderModel]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct InitTFAModel : Swift.Codable {
  public let gigyaAssertion: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFAVerificationCodeModel : Swift.Codable {
  public let phvToken: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFACompleteVerificationModel : Swift.Codable {
  public let providerAssertion: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFARegisteredPhone : Swift.Codable {
  public let id: Swift.String?
  public let obfuscated: Swift.String?
  public let lastMethod: Swift.String?
  public let lastVerification: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFAGetRegisteredPhoneNumbersModel : Swift.Codable {
  public let phones: [Gigya.TFARegisteredPhone]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFAEmail : Swift.Codable {
  public let id: Swift.String?
  public let obfuscated: Swift.String?
  public let lastVerification: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFAEmailsModel : Swift.Codable {
  public let emails: [Gigya.TFAEmail]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TFATotpRegisterModel : Swift.Codable {
  public let qrCode: Swift.String?
  public let sctToken: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TFAMode : Swift.String {
  case register
  case verify
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum TFAPhoneMethod : Swift.String {
  case sms
  case voice
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias GigyaDictionary = [Swift.String : Gigya.AnyCodable]
open class Resolver<T> where T : Gigya.GigyaAccountProtocol {
  public var regToken: Swift.String {
    get
  }
  required public init(businessApiDelegate: Gigya.BusinessApiDelegate, interruption: Gigya.GigyaResponseModel, completionHandler: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
  @objc deinit
}
public typealias PluginEventData = [Swift.String : Any]
public enum GigyaPluginEvent<T> where T : Gigya.GigyaAccountProtocol {
  case onBeforeValidation(event: Gigya.PluginEventData)
  case onAfterValidation(event: Gigya.PluginEventData)
  case onBeforeSubmit(event: Gigya.PluginEventData)
  case onSubmit(event: Gigya.PluginEventData)
  case onAfterSubmit(event: Gigya.PluginEventData)
  case onBeforeScreenLoad(event: Gigya.PluginEventData)
  case onAfterScreenLoad(event: Gigya.PluginEventData)
  case onFieldChanged(event: Gigya.PluginEventData)
  case onHide(event: Gigya.PluginEventData)
  case onLogin(account: T)
  case onLogout
  case onConnectionAdded
  case onConnectionRemoved
  case onCanceled
  case error(event: Gigya.PluginEventData)
}
public struct AnyCodable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: Gigya.AnyCodable, rhs: Gigya.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public init(nilLiteral: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
  public typealias BooleanLiteralType = Swift.Bool
  public typealias IntegerLiteralType = Swift.Int
  public typealias FloatLiteralType = Swift.Double
  public typealias StringLiteralType = Swift.String
  public typealias ArrayLiteralElement = Any
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public protocol AccountServiceProtocol : AnyObject {
  var account: Any? { get set }
  func getAccount<T>() -> T where T : Swift.Decodable, T : Swift.Encodable
  func setAccount<T>(newAccount: T) -> [Swift.String : Swift.AnyObject] where T : Swift.Decodable, T : Swift.Encodable
  func isCachedAccount() -> Swift.Bool
  func clear()
}
public protocol ApiServiceProtocol {
  init(with requst: Gigya.NetworkAdapterProtocol, session: Gigya.SessionServiceProtocol)
  func sendBlocking<T>(model: Gigya.ApiRequestModel, responseType: T.Type, completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  func send<T>(model: Gigya.ApiRequestModel, responseType: T.Type, completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
}
@frozen public enum TFAProvider : Swift.String, Swift.Codable {
  case phone
  case liveLink
  case email
  case totp
  case push
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class GigyaAlertControllerUtils {
  public static func show(vc: UIKit.UIViewController, title: Swift.String, message: Swift.String, result: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GigyaConfig {
  public var apiKey: Swift.String?
  public var apiDomain: Swift.String
  public var sessionVerificationInterval: Swift.Double?
  @objc deinit
}
public struct GigyaProfile : Swift.Codable {
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var nickname: Swift.String?
  public var address: Swift.String?
  public var age: Swift.Int?
  public var bio: Swift.String?
  public var birthDay: Swift.Int?
  public var birthMonth: Swift.Int?
  public var birthYear: Swift.Int?
  public var capabilities: Swift.String?
  public var certifications: [Gigya.GigyaProfile.Certification]?
  public var city: Swift.String?
  public var country: Swift.String?
  public var education: [Gigya.GigyaProfile.UserEducation]?
  public var educationLevel: Swift.String?
  public var email: Swift.String?
  public var favorites: Gigya.GigyaProfile.UserFavorites?
  public var followersCount: Swift.Int?
  public var followingCount: Swift.Int?
  public var gender: Swift.String?
  public var hometown: Swift.String?
  public var honors: Swift.String?
  public var identities: [Gigya.GigyaProfile.ProviderIdentity]?
  public var industry: Swift.String?
  public var interestedIn: Swift.String?
  public var interests: Swift.String?
  public var isConnected: Swift.Bool?
  public var iRank: Swift.Int?
  public var isSiteUID: Swift.Bool?
  public var isSiteUser: Swift.Bool?
  public var languages: Swift.String?
  public var likes: [Gigya.GigyaProfile.UserLike]?
  public var locale: Swift.String?
  public var name: Swift.String?
  public var oldestDataAge: Swift.Int?
  public var oldestDataUpdatedTimestamp: Swift.Int?
  public var patents: [Gigya.GigyaProfile.UserPatent]?
  public var phones: [Gigya.GigyaProfile.UserPhone]?
  public var photoURL: Swift.String?
  public var providers: Swift.String?
  public var publications: [Gigya.GigyaProfile.UserPublication]?
  public var relationshipStatus: Swift.String?
  public var religion: Swift.String?
  public var samlData: Gigya.GigyaProfile.UserSamlData?
  public var skills: [Gigya.GigyaProfile.UserSkill]?
  public var specialities: Swift.String?
  public var state: Swift.String?
  public var timezone: Swift.String?
  public var thumbnailURL: Swift.String?
  public var username: Swift.String?
  public var isVerified: Swift.Bool?
  public var verified: Swift.String?
  public var verifiedTimestamp: Swift.Int?
  public var work: [Gigya.GigyaProfile.UserWork]?
  public var zip: Swift.String?
  public struct Certification : Swift.Codable {
    public var name: Swift.String?
    public var authority: Swift.String?
    public var number: Swift.String?
    public var startDate: Swift.String?
    public var endDate: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserEducation : Swift.Codable {
    public var school: Swift.String?
    public var schoolType: Swift.String?
    public var fieldOfStudy: Swift.String?
    public var degree: Swift.String?
    public var startYear: Swift.String?
    public var endYear: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserFavorite : Swift.Codable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var category: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserFavorites : Swift.Codable {
    public var interests: [Gigya.GigyaProfile.UserFavorite]?
    public var activities: [Gigya.GigyaProfile.UserFavorite]?
    public var books: [Gigya.GigyaProfile.UserFavorite]?
    public var music: [Gigya.GigyaProfile.UserFavorite]?
    public var movies: [Gigya.GigyaProfile.UserFavorite]?
    public var television: [Gigya.GigyaProfile.UserFavorite]?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct ProviderIdentity : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserLike : Swift.Codable {
    public var name: Swift.String?
    public var category: Swift.String?
    public var id: Swift.String?
    public var time: Swift.String?
    public var timestamp: Swift.Int?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserPatent : Swift.Codable {
    public var title: Swift.String?
    public var summary: Swift.String?
    public var number: Swift.String?
    public var office: Swift.String?
    public var status: Swift.String?
    public var date: Swift.String?
    public var url: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserPhone : Swift.Codable {
    public var type: Swift.String?
    public var number: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserPublication : Swift.Codable {
    public var title: Swift.String?
    public var summary: Swift.String?
    public var publisher: Swift.String?
    public var date: Swift.String?
    public var url: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserSamlData : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserSkill : Swift.Codable {
    public var skill: Swift.String?
    public var level: Swift.String?
    public var years: Swift.String?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct UserWork : Swift.Codable {
    public var company: Swift.String?
    public var companyID: Swift.String?
    public var title: Swift.String?
    public var companySize: Swift.String?
    public var startDate: Swift.String?
    public var endDate: Swift.String?
    public var industry: Swift.String?
    public var isCurrent: Swift.Bool?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol BusinessApiDelegate : AnyObject {
  func sendApi(api: Swift.String, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  func sendApi<T>(dataType: T.Type, api: Swift.String, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  func callSetAccount<T>(dataType: T.Type, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callNativeSocialLogin<T>(params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>?) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callGetAccount<T>(completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callGetAccount<T>(dataType: T.Type, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callSociallogin<T>(provider: Gigya.GigyaSocialProviders, viewController: UIKit.UIViewController, params: [Swift.String : Any], dataType: T.Type, completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callLogin<T>(dataType: T.Type, loginId: Swift.String, password: Swift.String, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callfinalizeRegistration<T>(regToken: Swift.String, completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
  func callRegister<T>(dataType: T.Type, email: Swift.String, password: Swift.String, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void) where T : Gigya.GigyaAccountProtocol
}
@_hasMissingDesignatedInitializers final public class Gigya {
  public static func getContainer() -> Gigya.IOCContainer
  @discardableResult
  public static func sharedInstance() -> Gigya.GigyaCore<Gigya.GigyaAccount>
  @discardableResult
  public static func sharedInstance<T>(_ dataType: T.Type) -> Gigya.GigyaCore<T> where T : Gigya.GigyaAccountProtocol
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class GigyaLogger {
  public static func setDebugMode(to debugModeEnabled: Swift.Bool)
  public static func error(with clazz: Swift.AnyClass, message: Swift.String, generic: Any? = nil) -> Swift.Never
  public static func log(with clazz: Any?, message: Swift.String)
  @objc deinit
}
public struct GigyaDefinitions {
  public struct API {
    public static let getSdkConfig: Swift.String
    public static let login: Swift.String
    public static let logout: Swift.String
    public static let getAccountInfo: Swift.String
    public static let setAccountInfo: Swift.String
    public static let resetPassword: Swift.String
    public static let refreshProviderSession: Swift.String
    public static let initRegistration: Swift.String
    public static let register: Swift.String
    public static let finalizeRegistration: Swift.String
    public static let getConflictingAccount: Swift.String
    public static let notifyLogin: Swift.String
    public static let verifyLogin: Swift.String
    public static let notifySocialLogin: Swift.String
    public static let removeConnection: Swift.String
    public static let socialLogin: Swift.String
    public static let accountsSocialLogin: Swift.String
    public static let addConnection: Swift.String
    public static let accountsAddConnection: Swift.String
    public static let initTFA: Swift.String
    public static let tfaGetProviders: Swift.String
    public static let finalizeTFA: Swift.String
    public static let getEmailsTFA: Swift.String
    public static let emailSendVerificationCodeTFA: Swift.String
    public static let emailCompleteVerificationTFA: Swift.String
    public static let phoneCompleteVerificationTFA: Swift.String
    public static let getRegisteredPhoneNumbersTFA: Swift.String
    public static let sendVerificationCodeTFA: Swift.String
    public static let totpRegisterTFA: Swift.String
    public static let totpVerifyTFA: Swift.String
    public static let pushUpdateDevice: Swift.String
    public static let pushVerifyTFA: Swift.String
    public static let pushOptinTFA: Swift.String
    public static let pushOptinLogin: Swift.String
    public static let pushVerifyLogin: Swift.String
  }
  public struct Tfa {
    public static let email: Swift.String
    public static let phone: Swift.String
    public static let topt: Swift.String
  }
  public struct Plugin {
    public static let finished: Swift.String
    public static let canceled: Swift.String
  }
  public struct ErrorCode {
    public static let invalidJwt: Swift.Int
    public static let requestExpired: Swift.Int
  }
  public static var charactersAllowed: Swift.String
}
public struct ConflictingAccount : Swift.Codable {
  public let loginProviders: [Swift.String]?
  public let loginID: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class PendingRegistrationResolver<T> where T : Gigya.GigyaAccountProtocol {
  final public let regToken: Swift.String
  final public func setAccount(params: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TFAResolverFactory<A> where A : Gigya.GigyaAccountProtocol {
  public func getResolver<T>(for resolver: T.Type) -> T where T : Gigya.TFAResolver<A>
  @objc deinit
}
public struct SessionInfoModel : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@frozen public enum NetworkError : Swift.Error {
  case gigyaError(data: Gigya.GigyaResponseModel)
  case providerError(data: Swift.String)
  case networkError(error: Swift.Error)
  case emptyResponse
  case jsonParsingError(error: Swift.Error)
  case createURLRequestFailed
}
public protocol BasePushManagerProtocol {
  var idintityKey: Swift.String { get }
}
public enum GigyaSocialProviders {
  case facebook
  case google
  case yahoo
  case twitter
  case line
  case wechat
  case amazon
  case blogger
  case foursquare
  case instagram
  case kakao
  case linkedin
  case livedoor
  case messenger
  case mixi
  case naver
  case netlog
  case odnoklassniki
  case orangeFrance
  case paypaloauth
  case tencentQq
  case renren
  case sinaWeibo
  case spiceworks
  case vkontakte
  case wordpress
  case xing
  case yahooJapan
  case apple
  case web(provider: Swift.String)
  public init?(rawValue: Swift.String)
}
public enum GigyaNativeSocialProviders : Swift.String, Swift.CaseIterable {
  public static var allCases: [Gigya.GigyaNativeSocialProviders] {
    get
  }
  case facebook
  case google
  case line
  case wechat
  case apple
  public typealias AllCases = [Gigya.GigyaNativeSocialProviders]
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public typealias GigyaResponseHandler = (Foundation.NSData?, Swift.Error?) -> Swift.Void
public protocol NetworkAdapterProtocol {
  func send(model: Gigya.ApiRequestModel, blocking: Swift.Bool, completion: @escaping Gigya.GigyaResponseHandler)
}
public protocol SessionServiceProtocol {
  var session: Gigya.GigyaSession? { get set }
  func isValidSession() -> Swift.Bool
  func setSession(_ model: Gigya.SessionInfoModel?)
  func getSession(completion: @escaping ((Swift.Bool) -> Swift.Void))
  func setSessionAs(biometric: Swift.Bool, completion: @escaping (Gigya.GigyaBiometricResult) -> Swift.Void)
  var handlersAfterSetSession: Gigya.InterceptorsUtils { get }
  func clear()
  func clear(completion: @escaping () -> Swift.Void)
  func clearSession()
}
@objc public protocol ProviderWrapperProtocol {
  @objc init()
  @objc var clientID: Swift.String? { get set }
  @objc func login(params: [Swift.String : Any]?, viewController: UIKit.UIViewController?, completion: @escaping ([Swift.String : Any]?, Swift.String?) -> Swift.Void)
  @objc optional func logout()
}
@_hasMissingDesignatedInitializers final public class GigyaCore<T> : Gigya.GigyaInstanceProtocol where T : Gigya.GigyaAccountProtocol {
  final public let config: Gigya.GigyaConfig
  final public let biometric: Gigya.BiometricServiceProtocol
  final public func initFor(apiKey: Swift.String, apiDomain: Swift.String? = nil)
  final public func send(api: Swift.String, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  final public func send<B>(dataType: B.Type, api: Swift.String, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaApiResult<B>) -> Swift.Void) where B : Swift.Decodable, B : Swift.Encodable
  final public func isLoggedIn() -> Swift.Bool
  final public func setSession(_ session: Gigya.GigyaSession)
  final public func logout(completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  final public func login(loginId: Swift.String, password: Swift.String, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
  final public func login(with provider: Gigya.GigyaSocialProviders, viewController: UIKit.UIViewController, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
  final public func register(email: Swift.String, password: Swift.String, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
  final public func getAccount(_ clearAccount: Swift.Bool = false, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void)
  final public func setAccount(with account: T, completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void)
  final public func setAccount(with params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void)
  final public func forgotPassword(loginId: Swift.String, completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  final public func forgotPassword(params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  final public func notifySocialLogin(params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void)
  final public func socialLoginWith(providers: [Gigya.GigyaSocialProviders], viewController: UIKit.UIViewController, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaLoginResult<T>) -> Swift.Void)
  final public func addConnection(provider: Gigya.GigyaSocialProviders, viewController: UIKit.UIViewController, params: [Swift.String : Any], completion: @escaping (Gigya.GigyaApiResult<T>) -> Swift.Void)
  final public func removeConnection(provider: Gigya.GigyaSocialProviders, completion: @escaping (Gigya.GigyaApiResult<Gigya.GigyaDictionary>) -> Swift.Void)
  final public func showScreenSet(with name: Swift.String, viewController: UIKit.UIViewController, params: [Swift.String : Any] = [:], completion: @escaping (Gigya.GigyaPluginEvent<T>) -> Swift.Void)
  final public var interruptionsEnabled: Swift.Bool {
    get
  }
  final public func handleInterruptions(sdkHandles: Swift.Bool)
  final public func createWebBridge() -> Gigya.GigyaWebBridge<T>
  @available(iOS 10.0, *)
  final public func receivePush(userInfo: [Swift.AnyHashable : Any], completion: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  final public func foregroundNotification(with data: [Swift.AnyHashable : Any])
  @available(iOS 10.0, *)
  final public func updatePushToken(key: Swift.String)
  final public func verifyPush(with response: UserNotifications.UNNotificationResponse)
  final public func registerSocialProvider(of provider: Gigya.GigyaNativeSocialProviders, wrapper: Gigya.ProviderWrapperProtocol)
  @objc deinit
}
extension Gigya.GigyaBiometricResult : Swift.Equatable {}
extension Gigya.GigyaBiometricResult : Swift.Hashable {}
extension Gigya.PushNotificationModes : Swift.Equatable {}
extension Gigya.PushNotificationModes : Swift.Hashable {}
extension Gigya.PushNotificationModes : Swift.RawRepresentable {}
extension Gigya.ApiStatusCode : Swift.Equatable {}
extension Gigya.ApiStatusCode : Swift.Hashable {}
extension Gigya.ApiStatusCode : Swift.RawRepresentable {}
extension Gigya.Interruption : Swift.Equatable {}
extension Gigya.Interruption : Swift.Hashable {}
extension Gigya.Interruption : Swift.RawRepresentable {}
extension Gigya.TFAMode : Swift.Equatable {}
extension Gigya.TFAMode : Swift.Hashable {}
extension Gigya.TFAMode : Swift.RawRepresentable {}
extension Gigya.TFAPhoneMethod : Swift.Equatable {}
extension Gigya.TFAPhoneMethod : Swift.Hashable {}
extension Gigya.TFAPhoneMethod : Swift.RawRepresentable {}
extension Gigya.TFAProvider : Swift.Equatable {}
extension Gigya.TFAProvider : Swift.Hashable {}
extension Gigya.TFAProvider : Swift.RawRepresentable {}
extension Gigya.GigyaNativeSocialProviders : Swift.Equatable {}
extension Gigya.GigyaNativeSocialProviders : Swift.Hashable {}
extension Gigya.GigyaNativeSocialProviders : Swift.RawRepresentable {}
